import { appName } from "lib/constants";

// TODO: split up this file

/**
 * This name is just visual, shown in lnbits when you open the wallet URL
 * the actual ID of the user and wallet are generated by lnbits
 */
export function generateUserAndWalletName(type: "tip" | "user", id: string) {
  return type + "-" + id;
}

type CreateLnbitsUserRequest = {
  admin_id: string;
  user_name: string;
  wallet_name: string;
};

type CreateLnbitsUserResponse = {
  // below are unused
  // id: string;
  // name: string;
  // admin: string;
  // email: string;
  // password: string;
  wallets: [
    {
      id: string;
      admin: string;
      // name: string;
      user: string;
      adminkey: string;
      // inkey: string;
    }
  ];
};

export async function createLnbitsUserAndWallet(name: string): Promise<{
  createLnbitsUserResponse: Response;
  createLnbitsUserResponseBody: CreateLnbitsUserResponse;
}> {
  if (!process.env.LNBITS_URL) {
    throw new Error("No LNBITS_URL provided");
  }
  if (!process.env.LNBITS_API_KEY) {
    throw new Error("No LNBITS_API_KEY provided");
  }
  if (!process.env.LNBITS_USER_ID) {
    throw new Error("No LNBITS_USER_ID provided");
  }

  const createLnbitsUserRequest: CreateLnbitsUserRequest = {
    admin_id: process.env.LNBITS_USER_ID,
    user_name: name,
    wallet_name: name,
  };

  const createLnbitsUserRequestHeaders = new Headers();
  createLnbitsUserRequestHeaders.append("Content-Type", "application/json");
  createLnbitsUserRequestHeaders.append("Accept", "application/json");
  createLnbitsUserRequestHeaders.append(
    "X-Api-Key",
    process.env.LNBITS_API_KEY
  );

  const createLnbitsUserResponse = await fetch(
    `${process.env.LNBITS_URL}/usermanager/api/v1/users`,
    {
      method: "POST",
      body: JSON.stringify(createLnbitsUserRequest),
      headers: createLnbitsUserRequestHeaders,
    }
  );
  console.log(
    "Create user response: ",
    createLnbitsUserResponse.status,
    createLnbitsUserResponse.statusText
  );

  const createLnbitsUserResponseBody =
    (await createLnbitsUserResponse.json()) as CreateLnbitsUserResponse;
  console.log("Create user response body: ", createLnbitsUserResponseBody);
  return {
    createLnbitsUserResponse,
    createLnbitsUserResponseBody,
  };
}

export async function enableLnbitsExtension(
  lnbitsUserId: string,
  extension: "withdraw"
): Promise<boolean> {
  if (!process.env.LNBITS_API_KEY) {
    throw new Error("No LNBITS_API_KEY provided");
  }

  const enableExtensionRequestHeaders = new Headers();
  enableExtensionRequestHeaders.append("Content-Type", "application/json");
  enableExtensionRequestHeaders.append("Accept", "application/json");
  enableExtensionRequestHeaders.append("X-Api-Key", process.env.LNBITS_API_KEY);

  console.log("Enabling lnwithdraw extension for lnbits user " + lnbitsUserId);
  const enableExtensionResponse = await fetch(
    `${process.env.LNBITS_URL}/usermanager/api/v1/extensions?userid=${lnbitsUserId}&extension=${extension}&active=true`,
    {
      method: "POST",
      headers: enableExtensionRequestHeaders,
    }
  );

  if (!enableExtensionResponse.ok) {
    throw new Error(
      "Unable to enable extension for user " +
        lnbitsUserId +
        " : " +
        enableExtensionResponse.statusText
    );
  }

  return enableExtensionResponse.ok;
}

type CreateInvoiceRequest = {
  out: false;
  amount: number;
  memo: string;
  webhook: string | undefined;
};

type CreateInvoiceResponse = {
  payment_hash: string;
  payment_request: string;
};

export async function createFundingInvoice(
  amount: number,
  adminKey: string
): Promise<{ invoice: string; invoiceId: string }> {
  if (!process.env.LNBITS_WEBHOOK_SECRET_KEY) {
    throw new Error("No LNBITS_WEBHOOK_SECRET_KEY provided");
  }

  return createInvoice(
    amount,
    adminKey,
    `${appName} tip`,
    undefined // webhook no longer used (unreliable)
    // `${process.env.APP_URL}/api/webhooks/invoices?key=${process.env.LNBITS_WEBHOOK_SECRET_KEY}`
  );
}

export async function createInvoice(
  amount: number,
  adminKey: string,
  memo: string,
  webhook: string | undefined
): Promise<{ invoice: string; invoiceId: string }> {
  const createInvoiceRequest: CreateInvoiceRequest = {
    out: false,
    amount: amount,
    memo: memo,
    webhook,
  };

  const createInvoiceRequestHeaders = new Headers();
  createInvoiceRequestHeaders.append("Content-Type", "application/json");
  createInvoiceRequestHeaders.append("Accept", "application/json");
  createInvoiceRequestHeaders.append("X-Api-Key", adminKey);

  const createInvoiceResponse = await fetch(
    `${process.env.LNBITS_URL}/api/v1/payments`,
    {
      method: "POST",
      body: JSON.stringify(createInvoiceRequest),
      headers: createInvoiceRequestHeaders,
    }
  );

  if (!createInvoiceResponse.ok) {
    throw new Error(
      "Unable to create invoice: " + createInvoiceResponse.statusText
    );
  }

  const createInvoiceResponseData =
    (await createInvoiceResponse.json()) as CreateInvoiceResponse;

  return {
    invoice: createInvoiceResponseData.payment_request,
    invoiceId: createInvoiceResponseData.payment_hash,
  };
}

type PayInvoiceRequest = {
  out: true;
  bolt11: string;
};

type PayInvoiceResponse = {
  payment_hash: string;
  checking_id: string;
};

export async function payInvoice(
  invoice: string,
  adminKey: string
): Promise<{
  payInvoiceResponse: Response;
  payInvoiceResponseBody: PayInvoiceResponse | undefined;
}> {
  const payInvoiceRequest: PayInvoiceRequest = {
    out: true,
    bolt11: invoice,
  };

  const payInvoiceRequestHeaders = new Headers();
  payInvoiceRequestHeaders.append("Content-Type", "application/json");
  payInvoiceRequestHeaders.append("Accept", "application/json");
  payInvoiceRequestHeaders.append("X-Api-Key", adminKey);

  const payInvoiceResponse = await fetch(
    `${process.env.LNBITS_URL}/api/v1/payments`,
    {
      method: "POST",
      body: JSON.stringify(payInvoiceRequest),
      headers: payInvoiceRequestHeaders,
    }
  );

  console.log(
    "payInvoiceResponse",
    payInvoiceResponse.status,
    payInvoiceResponse.statusText
  );
  let payInvoiceResponseBody: PayInvoiceResponse | undefined;
  try {
    payInvoiceResponseBody = await payInvoiceResponse.json();
    console.log("payInvoiceResponse - responseBody", payInvoiceResponseBody);
  } catch {
    console.error("Failed to parse payInvoiceResponse body");
  }
  return { payInvoiceResponse, payInvoiceResponseBody };
}

type GetWalletResponse = {
  balance: number;
};

export async function getWalletBalance(walletAdminKey: string) {
  const getWalletRequestHeaders = new Headers();
  getWalletRequestHeaders.append("Accept", "application/json");
  getWalletRequestHeaders.append("X-Api-Key", walletAdminKey);

  const getWalletResponse = await fetch(
    `${process.env.LNBITS_URL}/api/v1/wallet`,
    {
      method: "GET",
      headers: getWalletRequestHeaders,
    }
  );

  let getWalletResponseBody: GetWalletResponse | undefined;
  try {
    getWalletResponseBody = await getWalletResponse.json();
    // console.log("getWallet", getWalletResponseBody);
  } catch {
    console.error("Failed to parse wallet body");
  }

  if (!getWalletResponse.ok) {
    throw new Error(
      "Unable to get wallet: " +
        getWalletResponse.statusText +
        " " +
        JSON.stringify(getWalletResponseBody)
    );
  }
  if (!getWalletResponseBody) {
    throw new Error("Get wallet did not return a response body");
  }
  if (isNaN(getWalletResponseBody.balance)) {
    throw new Error("Get wallet did not return a valid balance");
  }

  // wallet balance is in millisats
  return getWalletResponseBody.balance / 1000;
}

type InvoiceStatus = {
  paid: boolean;
  preimage: string;
  details: {
    checking_id: string;
    pending: boolean;
    amount: number;
    fee: number;
    memo: string;
    time: number;
    bolt11: string;
    preimage: string;
    payment_hash: string;
    extra: unknown;
    wallet_id: string;
    webhook: string | null;
    webhook_status: unknown;
  };
};

export async function getInvoiceStatus(walletAdminKey: string, paymentHash: string): Promise<InvoiceStatus> {
  const getInvoiceRequestHeaders = new Headers();
  getInvoiceRequestHeaders.append("Accept", "application/json");
  getInvoiceRequestHeaders.append("X-Api-Key", walletAdminKey);

  const getInvoiceResponse = await fetch(
    `${process.env.LNBITS_URL}/api/v1/payments/${paymentHash}`,
    {
      method: "GET",
      headers: getInvoiceRequestHeaders,
    }
  );

  let invoiceStatus: InvoiceStatus | undefined;
  try {
    invoiceStatus = await getInvoiceResponse.json();
    // console.log("getInvoiceStatus", invoiceStatus);
  } catch {
    console.error("Failed to parse invoice status");
  }

  if (!getInvoiceResponse.ok) {
    throw new Error(
      "Unable to get invoice status: " +
        getInvoiceResponse.statusText +
        " " +
        JSON.stringify(invoiceStatus)
    );
  }
  if (!invoiceStatus) {
    throw new Error("Get wallet did not return a response body");
  }
  return invoiceStatus;
}
